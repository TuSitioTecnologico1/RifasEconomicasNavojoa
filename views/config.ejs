<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Configurar Aplicaci√≥n</title>
    <style>
        @font-face {
            /* Regla de CSS que permite cargar fuentes externas. Declara una fuente y c√≥mo se debe cargar. */
            font-family: "Poppins-SemiBold";
            /* Define el nombre que usar√°s para referenciar la fuente en tu CSS */
            src: url("../public/fonts/poppins/Poppins-SemiBold.ttf") format("truetype");
            /* especifica la ubicaci√≥n del archivo de fuente y su formato. "truetype" indica que es un archivo TTF (TrueType Font), un formato ampliamente compatible con navegadores. */
            font-weight: 600;
            /* Define el peso (grosor) de la fuente. 100: Thin,  200: Extra Light, 300: Light, 400: Normal/Regular, 500: Medium, 600: Semi Bold, 700: Bold, 800: Extra Bold, 900: Black */
        }
        .body {
            background-color: black;
            color: white;
        }
        .body input{
            background-color: rgb(46, 46, 46);
            color: white;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 17px;
            
        }
        .body select{
            background-color: rgb(46, 46, 46);
            color: white;
            font-size: 17px;
        }
        .body label{
            font-family: Arial, Helvetica, sans-serif;
            font-size: 17px;
        }
        .body h1, h2{
            font-family: Arial, Helvetica, sans-serif;
        }
        .body h1{
            text-align: center;
            margin-bottom: 60px;
        }
        /*
        .form_configAplication input {
            width: 55%;
        }
        */
        .success {
            color: green;
        }
        .error {
            color: red;
        }
        .local_url_class {
            pointer-events: none; 
            background-color: #c6c5c5;
        }
        .online_url_class {
            pointer-events: none; 
            background-color: #c6c5c5;
        }
        .div_archivo input{
            width: 45%;
        }
        @media (max-width: 1299px) {
            .div_archivo input{
                width: 54%;
            }
        }
        @media (max-width: 999px) {
            .div_archivo input{
                width: 60%;
            }
        }
        @media (max-width: 849px) {
            .div_archivo input{
                width: 70%;
            }
        }
        @media (max-width: 749px) {
            .div_archivo input{
                width: 80%;
            }
        }
        @media (max-width: 649px) {
            .div_archivo input{
                width: 90%;
            }
        }
        @media (max-width: 549px) {
            .div_archivo input{
                width: 100%;
            }
        }
        #p_message{
            font-family: Arial, Helvetica, sans-serif;
            font-size: 14px;
        }
        .nota_class {
            font-family: Arial, Helvetica, sans-serif;
            font-size: 17px;
            text-align: center;
        }
        #h2_nota_title {
            margin-bottom: -12px;
        }
        #p_nota_https {
            margin-top: -10px;
        }
        
    </style>
</head>
<body class="body">
    <h1>Configurar par√°metros de la aplicaci√≥n</h1>

    <h2 id="h2_nota_title" class="nota_class"> NOTA: </h2>
    <p id="p_nota_bd" class="nota_class">
        La configuracion para la BD esta en el archivo ".env" el cual esta en la raiz del proyecto,
        por lo que se tiene que configurar manualmente antes de correr el servidor.
    </p>
    <p id="p_nota_https" class="nota_class">
        Tambien la la configuracion para indicar si el servidor usara HTTP(0) o HTTPS(1) tambien se encuentra ah√≠.
    </p><br><br>

    <% if (message) { %>
        <p id="p_message" class="<%= message.type %>"><%= message.text %></p>
    <% } %>

    <form id="form_configAplication_id" class="form_configAplication" action="/update-config" method="POST">
        <!--
        <h2>ARCHIVO .env</h2>
        <div class="div_archivo" id="div_archivo_env_class">
            <h2>Configuracion de la BD</h2>
            <label for="DB_HOST">DB_HOST:</label><br>
            <input type="text" id="DB_HOST" name="DB_HOST" value="<%= //envConfig.DB_HOST %>"><br><br>
            
            <label for="DB_USER">DB_USER:</label><br>
            <input type="text" id="DB_USER" name="DB_USER" value="<%= //envConfig.DB_USER %>"><br><br>
            
            <div class="input_pass_container_class">
                <label for="DB_USER">DB_PASS:</label><br>
                <input type="password" id="DB_PASS" name="DB_PASS" value="<%= //envConfig.DB_PASS %>" placeholder="Contrase√±a">
                <button type="button" class="toggle-btn" id="togglePassword">üëÅÔ∏è</button>
            </div><br>
            
            <label for="DATABASE">DATABASE:</label><br>
            <input type="text" id="DATABASE" name="DATABASE" value="<%= //envConfig.DATABASE %>"><br><br>

            <label for="PORT">PORT:</label><br>
            <input type="text" id="PORT" name="PORT" pattern="\d{4}" maxlength="4" inputmode="numeric" value="<%= //envConfig.PORT %>" placeholder="PORT" title="Por favor, ingresa solo n√∫meros"><br><br>

            <label for="HTTPS_ENABLED">HTTPS_ENABLED:</label><br>
            <select id="HTTPS_ENABLED" name="HTTPS_ENABLED" title="Selecciona un valor">
                <option value="0" <% //if (envConfig.HTTPS_ENABLED == 0) { %> selected <% //} %>>No</option>
                <option value="1" <% //if (envConfig.HTTPS_ENABLED == 1) { %> selected <% //} %>>S√≠</option>
            </select>
        </div><br><br>
        -->
        
        <h2>ARCHIVO config.js</h2>
        <div class="div_archivo" id="div_archivo_config_class">
            <h2>Configuraci√≥n del servidor</h2>
            <label for="local_url">Local URL:</label><br>
            <input 
                type="url" 
                id="local_url" 
                name="local_url" 
                value="<%= config.local_url %>" 
                placeholder="http://localhost:3000" 
                class="local_url_class"
                required
                readonly><br><br>

            <label for="online_url">Online URL:</label><br>
            <input 
                type="url" 
                id="online_url" 
                name="online_url" 
                value="<%= config.online_url %>" 
                placeholder="https://example.com" 
                class="online_url_class"
                required
                readonly><br><br>

            <label for="server_url">Server URL:</label><br>
            <select id="server_url" name="server_url" onchange="updateApiUrls()">
                <option value=""> Selecciona el server . . . </option>
                <option value="<%= config.local_url %>"> Local </option>
                <option value="<%= config.online_url %>"> Online </option>
                <!--<option value="<%= config.local_url %>" <%= config.server_url === config.local_url ? 'selected' : '' %>>Local</option>-->
                <!--<option value="<%= config.online_url %>" <%= config.server_url === config.online_url ? 'selected' : '' %>>Online</option>-->
            </select><br><br>

            <h2>Rutas API</h2>
            <% for (let key in config) { 
                if (key.includes('URL') && key !== 'local_url' && key !== 'online_url' && key !== 'server_url') { %>
                <label for="<%= key %>"><%= key %>:</label><br>
                <input type="text" id="<%= key %>" name="<%= key %>" value="<%= config[key] %>" class="api-url"><br><br>
            <% } } %>
        </div><br><br>

        
        <h2>ARCHIVO variables.js</h2>
        <div class="div_archivo" id="div_archivo_variables_class">
            <h2>Variables para vistas EJS</h2>
            <% if (variables) { %>
                <% for (let key in variables) { %>
                    <% if (key == 'url_edicion') { %>
                        <% for (let key2 in variables.url_edicion) { %>
                            <label for="<%= key2 %>"><%= key2 %>:</label><br>
                            <input type="text" id="<%= key2 %>" name="<%= key2 %>" value="<%= variables.url_edicion[key2] %>" class="variables-url"><br><br>
                        <% } %>
                    <% } else { %>
                        <% if(key != 'message'){ %>
                        <label for="<%= key %>"><%= key %>:</label><br>
                        <input type="text" id="<%= key %>" name="<%= key %>" value="<%= variables[key] %>" class="variables-url"><br><br>
                        <% }else{ %>
                        <input type="text" id="<%= key %>" name="<%= key %>" value="<%= variables[key] %>" class="variables-url" style="display: none;">
                        <% } %>
                    <% } %>
                <% } %>
            <% } else { %>
                <p>No se ha cargado correctamente el objeto de variables.</p>
            <% } %>
        </div>
        



        <button type="submit">Guardar cambios</button>
    </form>



    <script>
        // Manejador del evento submit
        document.getElementById('form_configAplication_id').addEventListener('submit', function(e) {
            e.preventDefault();  // Evita que el formulario se env√≠e de inmediato

            // Llamar a una funci√≥n antes de enviar el formulario
            myFunction();

            // Ahora, si todo est√° bien, puedes enviar el formulario
            // Usar el m√©todo submit() para enviarlo manualmente
            this.submit();  // Enviar el formulario despu√©s de ejecutar la funci√≥n
        });

        function myFunction() {
            alert('Configuraci√≥n actualizada exitosamente.');
            // Aqu√≠ puedes realizar cualquier l√≥gica que necesites antes de enviar el formulario
            document.getElementById("message").value = "1";
        }

        /*const togglePassword = document.getElementById("togglePassword");
        const passwordField = document.getElementById("DB_PASS");

        togglePassword.addEventListener("click", () => {
            // Alternar entre 'password' y 'text'
            if (passwordField.type === "password") {
                passwordField.type = "text";
                togglePassword.textContent = "üôà"; // Cambiar el icono o texto
            } else {
                passwordField.type = "password";
                togglePassword.textContent = "üëÅÔ∏è"; // Cambiar el icono o texto
            }
        });
        */

        function updateApiUrls() {
            //console.log("function updateApiUrls() {");
            const serverUrl = document.getElementById('server_url').value; // Obtener valor del servidor seleccionado
            const apiInputs = document.querySelectorAll('.api-url'); // Seleccionar todas las rutas API
            const variblesInputs = document.querySelectorAll('.variables-url'); // Seleccionar todas las rutas de las VARIABLES de las vistas EJS

            apiInputs.forEach(input => {
                //console.log("input: ");
                //console.log(input);
                const input_data = input.value.toLowerCase(); // Convertir a min√∫sculas si no quieres que sea sensible a may√∫sculas
                const endpoint = input_data.split('/').slice(-1)[0]; // Extraer el endpoint
                //console.log("endpoint: ");
                //console.log(endpoint);
                if(endpoint == "cambiar_estado_numeros" && input_data != "#"){
                    input.value = `${serverUrl}/api/numeros/${endpoint}`; // Actualizar la URL con el servidor seleccionado
                }else{
                    input.value = `${serverUrl}/api/${endpoint}`; // Actualizar la URL con el servidor seleccionado
                }
            });

            variblesInputs.forEach(input => {
                const input_data = input.value.toLowerCase(); // Convertir a min√∫sculas si no quieres que sea sensible a may√∫sculas
                const input_localURL = document.getElementById("local_url").value.toLowerCase(); // Texto que deseas buscar
                const input_onlineURL = document.getElementById("online_url").value.toLowerCase(); // Texto que deseas buscar
                
                if (input_data.includes(input_localURL) || input_data.includes(input_onlineURL)) {
                    //console.log("El input contiene el texto deseado.");
                    const endpoint_split = input_data.split('/'); // Extraer el endpoint
                    let endpoint = "";
                    //console.log("endpoint_split.length: "+endpoint_split.length);
                    if(endpoint_split.length == 5){
                        //console.log("if(endpoint_split.length == 5){");
                        //console.log("endpoint_split:");
                        //console.log(endpoint_split);
                        endpoint = endpoint_split[3]+"/"+endpoint_split[4];
                        //console.log(endpoint);
                        let input_data_update = input.value = `${serverUrl}/${endpoint}`; // Actualizar la URL con el servidor seleccionado
                        //console.log(input_data_update);
                    }else{
                        //console.log("else - if(endpoint_split.length == 5){");
                        const endpoint = input.value.split('/').slice(-1)[0]; // Extraer el endpoint
                        //console.log(endpoint);
                        let input_data_update = input.value = `${serverUrl}/${endpoint}`; // Actualizar la URL con el servidor seleccionado
                        //console.log(input_data_update);
                    }
                } else {
                    console.log("El input NO contiene el texto deseado.");
                }
            });
        }
    </script>
</body>
</html>
